{"/home/travis/build/npmtest/node-npmtest-node-sass/test.js":"/* istanbul instrument in package npmtest_node_sass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-sass/lib.npmtest_node_sass.js":"/* istanbul instrument in package npmtest_node_sass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_sass = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_sass = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-sass/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-sass && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_sass */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_sass\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_sass.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_sass.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_sass.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_sass.__dirname + '/lib.npmtest_node_sass.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/lib/index.js":"/*!\n * node-sass: lib/index.js\n */\n\nvar path = require('path'),\n  clonedeep = require('lodash.clonedeep'),\n  assign = require('lodash.assign'),\n  sass = require('./extensions');\n\n/**\n * Require binding\n */\n\nvar binding = require('./binding')(sass);\n\n/**\n * Get input file\n *\n * @param {Object} options\n * @api private\n */\n\nfunction getInputFile(options) {\n  return options.file ? path.resolve(options.file) : null;\n}\n\n/**\n * Get output file\n *\n * @param {Object} options\n * @api private\n */\n\nfunction getOutputFile(options) {\n  var outFile = options.outFile;\n\n  if (!outFile || typeof outFile !== 'string' || (!options.data && !options.file)) {\n    return null;\n  }\n\n  return path.resolve(outFile);\n}\n\n/**\n * Get source map\n *\n * @param {Object} options\n * @api private\n */\n\nfunction getSourceMap(options) {\n  var sourceMap = options.sourceMap;\n\n  if (sourceMap && typeof sourceMap !== 'string' && options.outFile) {\n    sourceMap = options.outFile + '.map';\n  }\n\n  return sourceMap && typeof sourceMap === 'string' ? path.resolve(sourceMap) : null;\n}\n\n/**\n * Get stats\n *\n * @param {Object} options\n * @api private\n */\n\nfunction getStats(options) {\n  var stats = {};\n\n  stats.entry = options.file || 'data';\n  stats.start = Date.now();\n\n  return stats;\n}\n\n/**\n * End stats\n *\n * @param {Object} stats\n * @param {Object} sourceMap\n * @api private\n */\n\nfunction endStats(stats) {\n  stats.end = Date.now();\n  stats.duration = stats.end - stats.start;\n\n  return stats;\n}\n\n/**\n * Get style\n *\n * @param {Object} options\n * @api private\n */\n\nfunction getStyle(options) {\n  var styles = {\n    nested: 0,\n    expanded: 1,\n    compact: 2,\n    compressed: 3\n  };\n\n  return styles[options.outputStyle] || 0;\n}\n\n/**\n * Get indent width\n *\n * @param {Object} options\n * @api private\n */\n\nfunction getIndentWidth(options) {\n  var width = parseInt(options.indentWidth) || 2;\n\n  return width > 10 ? 2 : width;\n}\n\n/**\n * Get indent type\n *\n * @param {Object} options\n * @api private\n */\n\nfunction getIndentType(options) {\n  var types = {\n    space: 0,\n    tab: 1\n  };\n\n  return types[options.indentType] || 0;\n}\n\n/**\n * Get linefeed\n *\n * @param {Object} options\n * @api private\n */\n\nfunction getLinefeed(options) {\n  var feeds = {\n    cr: '\\r',\n    crlf: '\\r\\n',\n    lf: '\\n',\n    lfcr: '\\n\\r'\n  };\n\n  return feeds[options.linefeed] || '\\n';\n}\n\n/**\n * Build an includePaths string\n * from the options.includePaths array and the SASS_PATH environment variable\n *\n * @param {Object} options\n * @api private\n */\n\nfunction buildIncludePaths(options) {\n  options.includePaths = options.includePaths || [];\n\n  if (process.env.hasOwnProperty('SASS_PATH')) {\n    options.includePaths = options.includePaths.concat(\n      process.env.SASS_PATH.split(path.delimiter)\n    );\n  }\n\n  // Preserve the behaviour people have come to expect.\n  // This behaviour was removed from Sass in 3.4 and\n  // LibSass in 3.5.\n  options.includePaths.unshift(process.cwd());\n\n  return options.includePaths.join(path.delimiter);\n}\n\n/**\n * Get options\n *\n * @param {Object} options\n * @api private\n */\n\nfunction getOptions(opts, cb) {\n  if (typeof opts !== 'object') {\n    throw new Error('Invalid: options is not an object.');\n  }\n  var options = clonedeep(opts || {});\n\n  options.sourceComments = options.sourceComments || false;\n  if (options.hasOwnProperty('file')) {\n    options.file = getInputFile(options);\n  }\n  options.outFile = getOutputFile(options);\n  options.includePaths = buildIncludePaths(options);\n  options.precision = parseInt(options.precision) || 5;\n  options.sourceMap = getSourceMap(options);\n  options.style = getStyle(options);\n  options.indentWidth = getIndentWidth(options);\n  options.indentType = getIndentType(options);\n  options.linefeed = getLinefeed(options);\n\n  // context object represents node-sass environment\n  options.context = { options: options, callback: cb };\n\n  options.result = {\n    stats: getStats(options)\n  };\n\n  return options;\n}\n\n/**\n * Executes a callback and transforms any exception raised into a sass error\n *\n * @param {Function} callback\n * @param {Array} arguments\n * @api private\n */\n\nfunction tryCallback(callback, args) {\n  try {\n    return callback.apply(this, args);\n  } catch (e) {\n    if (typeof e === 'string') {\n      return new binding.types.Error(e);\n    } else if (e instanceof Error) {\n      return new binding.types.Error(e.message);\n    } else {\n      return new binding.types.Error('An unexpected error occurred');\n    }\n  }\n}\n\n/**\n * Normalizes the signature of custom functions to make it possible to just supply the\n * function name and have the signature default to `fn(...)`. The callback is adjusted\n * to transform the input sass list into discrete arguments.\n *\n * @param {String} signature\n * @param {Function} callback\n * @return {Object}\n * @api private\n */\n\nfunction normalizeFunctionSignature(signature, callback) {\n  if (!/^\\*|@warn|@error|@debug|\\w+\\(.*\\)$/.test(signature)) {\n    if (!/\\w+/.test(signature)) {\n      throw new Error('Invalid function signature format \"' + signature + '\"');\n    }\n\n    return {\n      signature: signature + '(...)',\n      callback: function() {\n        var args = Array.prototype.slice.call(arguments),\n          list = args.shift(),\n          i;\n\n        for (i = list.getLength() - 1; i >= 0; i--) {\n          args.unshift(list.getValue(i));\n        }\n\n        return callback.apply(this, args);\n      }\n    };\n  }\n\n  return {\n    signature: signature,\n    callback: callback\n  };\n}\n\n/**\n * Render\n *\n * @param {Object} options\n * @api public\n */\n\nmodule.exports.render = function(opts, cb) {\n  var options = getOptions(opts, cb);\n\n  // options.error and options.success are for libsass binding\n  options.error = function(err) {\n    var payload = assign(new Error(), JSON.parse(err));\n\n    if (cb) {\n      options.context.callback.call(options.context, payload, null);\n    }\n  };\n\n  options.success = function() {\n    var result = options.result;\n    var stats = endStats(result.stats);\n    var payload = {\n      css: result.css,\n      map: result.map,\n      stats: stats\n    };\n\n    if (cb) {\n      options.context.callback.call(options.context, null, payload);\n    }\n  };\n\n  var importer = options.importer;\n\n  if (importer) {\n    if (Array.isArray(importer)) {\n      options.importer = [];\n      importer.forEach(function(subject, index) {\n        options.importer[index] = function(file, prev, bridge) {\n          function done(result) {\n            bridge.success(result === module.exports.NULL ? null : result);\n          }\n\n          var result = subject.call(options.context, file, prev, done);\n\n          if (result !== undefined) {\n            done(result);\n          }\n        };\n      });\n    } else {\n      options.importer = function(file, prev, bridge) {\n        function done(result) {\n          bridge.success(result === module.exports.NULL ? null : result);\n        }\n\n        var result = importer.call(options.context, file, prev, done);\n\n        if (result !== undefined) {\n          done(result);\n        }\n      };\n    }\n  }\n\n  var functions = clonedeep(options.functions);\n\n  if (functions) {\n    options.functions = {};\n\n    Object.keys(functions).forEach(function(subject) {\n      var cb = normalizeFunctionSignature(subject, functions[subject]);\n\n      options.functions[cb.signature] = function() {\n        var args = Array.prototype.slice.call(arguments),\n          bridge = args.pop();\n\n        function done(data) {\n          bridge.success(data);\n        }\n\n        var result = tryCallback(cb.callback.bind(options.context), args.concat(done));\n\n        if (result) {\n          done(result);\n        }\n      };\n    });\n  }\n\n  if (options.data) {\n    binding.render(options);\n  } else if (options.file) {\n    binding.renderFile(options);\n  } else {\n    cb({status: 3, message: 'No input specified: provide a file name or a source string to process' });\n  }\n};\n\n/**\n * Render sync\n *\n * @param {Object} options\n * @api public\n */\n\nmodule.exports.renderSync = function(opts) {\n  var options = getOptions(opts);\n  var importer = options.importer;\n\n  if (importer) {\n    if (Array.isArray(importer)) {\n      options.importer = [];\n      importer.forEach(function(subject, index) {\n        options.importer[index] = function(file, prev) {\n          var result = subject.call(options.context, file, prev);\n\n          return result === module.exports.NULL ? null : result;\n        };\n      });\n    } else {\n      options.importer = function(file, prev) {\n        var result = importer.call(options.context, file, prev);\n\n        return result === module.exports.NULL ? null : result;\n      };\n    }\n  }\n\n  var functions = clonedeep(options.functions);\n\n  if (options.functions) {\n    options.functions = {};\n\n    Object.keys(functions).forEach(function(signature) {\n      var cb = normalizeFunctionSignature(signature, functions[signature]);\n\n      options.functions[cb.signature] = function() {\n        return tryCallback(cb.callback.bind(options.context), arguments);\n      };\n    });\n  }\n\n  var status;\n  if (options.data) {\n    status = binding.renderSync(options);\n  } else if (options.file) {\n    status = binding.renderFileSync(options);\n  } else {\n    throw new Error('No input specified: provide a file name or a source string to process');\n  }\n\n  var result = options.result;\n\n  if (status) {\n    result.stats = endStats(result.stats);\n    return result;\n  }\n\n  throw assign(new Error(), JSON.parse(result.error));\n};\n\n/**\n * API Info\n *\n * @api public\n */\n\nmodule.exports.info = sass.getVersionInfo(binding);\n\n/**\n * Expose sass types\n */\n\nmodule.exports.types = binding.types;\nmodule.exports.TRUE = binding.types.Boolean.TRUE;\nmodule.exports.FALSE = binding.types.Boolean.FALSE;\nmodule.exports.NULL = binding.types.Null.NULL;\n\n/**\n * Polyfill the old API\n *\n * TODO: remove for 4.0\n */\n\nfunction processSassDeprecationMessage() {\n  console.log('Deprecation warning: `process.sass` is an undocumented internal that will be removed in future versions of Node Sass.');\n}\n\nprocess.sass = process.sass || {\n  get versionInfo()   { processSassDeprecationMessage(); return module.exports.info; },\n  get binaryName()    { processSassDeprecationMessage(); return sass.getBinaryName(); },\n  get binaryUrl()     { processSassDeprecationMessage(); return sass.getBinaryUrl(); },\n  get binaryPath()    { processSassDeprecationMessage(); return sass.getBinaryPath(); },\n  get getBinaryPath() { processSassDeprecationMessage(); return sass.getBinaryPath; },\n};\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/lib/extensions.js":"/*!\n * node-sass: lib/extensions.js\n */\n\nvar eol = require('os').EOL,\n  fs = require('fs'),\n  pkg = require('../package.json'),\n  mkdir = require('mkdirp'),\n  path = require('path'),\n  defaultBinaryPath = path.join(__dirname, '..', 'vendor');\n\n/**\n * Get the human readable name of the Platform that is running\n *\n * @param  {string} platform - An OS platform to match, or null to fallback to\n * the current process platform\n * @return {Object} The name of the platform if matched, false otherwise\n *\n * @api public\n */\nfunction getHumanPlatform(platform) {\n  switch (platform || process.platform) {\n    case 'darwin': return 'OS X';\n    case 'freebsd': return 'FreeBSD';\n    case 'linux': return 'Linux';\n    case 'linux_musl': return 'Linux/musl';\n    case 'win32': return 'Windows';\n    default: return false;\n  }\n}\n\n/**\n * Provides a more readable version of the architecture\n *\n * @param  {string} arch - An instruction architecture name to match, or null to\n * lookup the current process architecture\n * @return {Object} The value of the process architecture, or false if unknown\n *\n * @api public\n */\nfunction getHumanArchitecture(arch) {\n  switch (arch || process.arch) {\n    case 'ia32': return '32-bit';\n    case 'x86': return '32-bit';\n    case 'x64': return '64-bit';\n    default: return false;\n  }\n}\n\n/**\n * Get the friendly name of the Node environment being run\n *\n * @param  {Object} abi - A Node Application Binary Interface value, or null to\n * fallback to the current Node ABI\n * @return {Object} Returns a string name of the Node environment or false if\n * unmatched\n *\n * @api public\n */\nfunction getHumanNodeVersion(abi) {\n  switch (parseInt(abi || process.versions.modules, 10)) {\n    case 11: return 'Node 0.10.x';\n    case 14: return 'Node 0.12.x';\n    case 42: return 'io.js 1.x';\n    case 43: return 'io.js 1.1.x';\n    case 44: return 'io.js 2.x';\n    case 45: return 'io.js 3.x';\n    case 46: return 'Node.js 4.x';\n    case 47: return 'Node.js 5.x';\n    case 48: return 'Node.js 6.x';\n    case 51: return 'Node.js 7.x';\n    case 54: return 'Node.js 8.x';\n    default: return false;\n  }\n}\n\n/**\n * Get a human readable description of where node-sass is running to support\n * user error reporting when something goes wrong\n *\n * @param  {string} env - The name of the native bindings that is to be parsed\n * @return {string} A description of what os, architecture, and Node version\n * that is being run\n *\n * @api public\n */\nfunction getHumanEnvironment(env) {\n  var binding = env.replace(/_binding\\.node$/, ''),\n    parts = binding.split('-'),\n    platform = getHumanPlatform(parts[0]),\n    arch = getHumanArchitecture(parts[1]),\n    runtime = getHumanNodeVersion(parts[2]);\n\n  if (parts.length !== 3) {\n    return 'Unknown environment (' + binding + ')';\n  }\n\n  if (!platform) {\n    platform = 'Unsupported platform (' + parts[0] + ')';\n  }\n\n  if (!arch) {\n    arch = 'Unsupported architecture (' + parts[1] + ')';\n  }\n\n  if (!runtime) {\n    runtime = 'Unsupported runtime (' + parts[2] + ')';\n  }\n\n  return [\n    platform, arch, 'with', runtime,\n  ].join(' ');\n}\n\n/**\n * Get the value of the binaries under the default path\n *\n * @return {Array} The currently installed node-sass bindings\n *\n * @api public\n */\nfunction getInstalledBinaries() {\n  return fs.readdirSync(defaultBinaryPath);\n}\n\n/**\n * Check that an environment matches the whitelisted values or the current\n * environment if no parameters are passed\n *\n * @param  {string} platform - The name of the OS platform(darwin, win32, etc...)\n * @param  {string} arch - The instruction set architecture of the Node environment\n * @param  {string} abi - The Node Application Binary Interface\n * @return {Boolean} True, if node-sass supports the current platform, false otherwise\n *\n * @api public\n */\nfunction isSupportedEnvironment(platform, arch, abi) {\n  return (\n    false !== getHumanPlatform(platform) &&\n    false !== getHumanArchitecture(arch) &&\n    false !== getHumanNodeVersion(abi)\n  );\n}\n\n/**\n * Get the value of a CLI argument\n *\n * @param {String} name\n * @param {Array} args\n * @api private\n */\n\nfunction getArgument(name, args) {\n  var flags = args || process.argv.slice(2),\n    index = flags.lastIndexOf(name);\n\n  if (index === -1 || index + 1 >= flags.length) {\n    return null;\n  }\n\n  return flags[index + 1];\n}\n\n/**\n * Get binary name.\n * If environment variable SASS_BINARY_NAME,\n * .npmrc variable sass_binary_name or\n * process argument --binary-name is provided,\n * return it as is, otherwise make default binary\n * name: {platform}-{arch}-{v8 version}.node\n *\n * @api public\n */\n\nfunction getBinaryName() {\n  var binaryName,\n    variant,\n    platform = process.platform;\n\n  if (getArgument('--sass-binary-name')) {\n    binaryName = getArgument('--sass-binary-name');\n  } else if (process.env.SASS_BINARY_NAME) {\n    binaryName = process.env.SASS_BINARY_NAME;\n  } else if (process.env.npm_config_sass_binary_name) {\n    binaryName = process.env.npm_config_sass_binary_name;\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryName) {\n    binaryName = pkg.nodeSassConfig.binaryName;\n  } else {\n    variant = getPlatformVariant();\n    if (variant) {\n      platform += '_' + variant;\n    }\n\n    binaryName = [\n      platform, '-',\n      process.arch, '-',\n      process.versions.modules\n    ].join('');\n  }\n\n  return [binaryName, 'binding.node'].join('_');\n}\n\n/**\n * Determine the URL to fetch binary file from.\n * By default fetch from the node-sass distribution\n * site on GitHub.\n *\n * The default URL can be overriden using\n * the environment variable SASS_BINARY_SITE,\n * .npmrc variable sass_binary_site or\n * or a command line option --sass-binary-site:\n *\n *   node scripts/install.js --sass-binary-site http://example.com/\n *\n * The URL should to the mirror of the repository\n * laid out as follows:\n *\n * SASS_BINARY_SITE/\n *\n *  v3.0.0\n *  v3.0.0/freebsd-x64-14_binding.node\n *  ....\n *  v3.0.0\n *  v3.0.0/freebsd-ia32-11_binding.node\n *  v3.0.0/freebsd-x64-42_binding.node\n *  ... etc. for all supported versions and platforms\n *\n * @api public\n */\n\nfunction getBinaryUrl() {\n  var site = getArgument('--sass-binary-site') ||\n             process.env.SASS_BINARY_SITE  ||\n             process.env.npm_config_sass_binary_site ||\n             (pkg.nodeSassConfig && pkg.nodeSassConfig.binarySite) ||\n             'https://github.com/sass/node-sass/releases/download';\n\n  return [site, 'v' + pkg.version, getBinaryName()].join('/');\n}\n\n/**\n * Get binary path.\n * If environment variable SASS_BINARY_PATH,\n * .npmrc variable sass_binary_path or\n * process argument --sass-binary-path is provided,\n * select it by appending binary name, otherwise\n * make default binary path using binary name.\n * Once the primary selection is made, check if\n * callers wants to throw if file not exists before\n * returning.\n *\n * @api public\n */\n\nfunction getBinaryPath() {\n  var binaryPath;\n\n  if (getArgument('--sass-binary-path')) {\n    binaryPath = getArgument('--sass-binary-path');\n  } else if (process.env.SASS_BINARY_PATH) {\n    binaryPath = process.env.SASS_BINARY_PATH;\n  } else if (process.env.npm_config_sass_binary_path) {\n    binaryPath = process.env.npm_config_sass_binary_path;\n  } else if (pkg.nodeSassConfig && pkg.nodeSassConfig.binaryPath) {\n    binaryPath = pkg.nodeSassConfig.binaryPath;\n  } else {\n    binaryPath = path.join(defaultBinaryPath, getBinaryName().replace(/_(?=binding\\.node)/, '/'));\n  }\n\n  return binaryPath;\n}\n\n/**\n * An array of paths suitable for use as a local disk cache of the binding.\n *\n * @return {[]String} an array of paths\n * @api public\n */\nfunction getCachePathCandidates() {\n  return [\n    process.env.npm_config_sass_binary_cache,\n    process.env.npm_config_cache,\n  ].filter(function(_) { return _; });\n}\n\n/**\n * The most suitable location for caching the binding on disk.\n *\n * Given the candidates directories provided by `getCachePathCandidates()` this\n * returns the first writable directory. By treating the candidate directories\n * as a prioritised list this method is deterministic, assuming no change to the\n * local environment.\n *\n * @return {String} directory to cache binding\n * @api public\n */\nfunction getBinaryCachePath() {\n  var i,\n    cachePath,\n    cachePathCandidates = getCachePathCandidates();\n\n  for (i = 0; i < cachePathCandidates.length; i++) {\n    cachePath = path.join(cachePathCandidates[i], pkg.name, pkg.version);\n\n    try {\n      mkdir.sync(cachePath);\n      return cachePath;\n    } catch (e) {\n      // Directory is not writable, try another\n    }\n  }\n\n  return '';\n}\n\n/**\n * The cached binding\n *\n * Check the candidates directories provided by `getCachePathCandidates()` for\n * the binding file, if it exists. By treating the candidate directories\n * as a prioritised list this method is deterministic, assuming no change to the\n * local environment.\n *\n * @return {String} path to cached binary\n * @api public\n */\nfunction getCachedBinary() {\n  var i,\n    cachePath,\n    cacheBinary,\n    cachePathCandidates = getCachePathCandidates(),\n    binaryName = getBinaryName();\n\n  for (i = 0; i < cachePathCandidates.length; i++) {\n    cachePath = path.join(cachePathCandidates[i], pkg.name, pkg.version);\n    cacheBinary = path.join(cachePath, binaryName);\n\n    if (fs.existsSync(cacheBinary)) {\n      return cacheBinary;\n    }\n  }\n\n  return '';\n}\n\n/**\n * Does the supplied binary path exist\n *\n * @param {String} binaryPath\n * @api public\n */\n\nfunction hasBinary(binaryPath) {\n  return fs.existsSync(binaryPath);\n}\n\n/**\n * Get Sass version information\n *\n * @api public\n */\n\nfunction getVersionInfo(binding) {\n  return [\n    ['node-sass', pkg.version, '(Wrapper)', '[JavaScript]'].join('\\t'),\n    ['libsass  ', binding.libsassVersion(), '(Sass Compiler)', '[C/C++]'].join('\\t'),\n  ].join(eol);\n}\n\n/**\n * Gets the platform variant, currently either an empty string or 'musl' for Linux/musl platforms.\n *\n * @api public\n */\n\nfunction getPlatformVariant() {\n  var contents = '';\n\n  if (process.platform !== 'linux') {\n    return '';\n  }\n\n  try {\n    contents = fs.readFileSync(process.execPath);\n\n    // Buffer.indexOf was added in v1.5.0 so cast to string for old node\n    // Delay contents.toStrings because it's expensive\n    if (!contents.indexOf) {\n      contents = contents.toString();\n    }\n\n    if (contents.indexOf('libc.musl-x86_64.so.1') !== -1) {\n      return 'musl';\n    }\n  } catch (err) { } // eslint-disable-line no-empty\n\n  return '';\n}\n\nmodule.exports.hasBinary = hasBinary;\nmodule.exports.getBinaryUrl = getBinaryUrl;\nmodule.exports.getBinaryName = getBinaryName;\nmodule.exports.getBinaryPath = getBinaryPath;\nmodule.exports.getBinaryCachePath = getBinaryCachePath;\nmodule.exports.getCachedBinary = getCachedBinary;\nmodule.exports.getCachePathCandidates = getCachePathCandidates;\nmodule.exports.getVersionInfo = getVersionInfo;\nmodule.exports.getHumanEnvironment = getHumanEnvironment;\nmodule.exports.getInstalledBinaries = getInstalledBinaries;\nmodule.exports.isSupportedEnvironment = isSupportedEnvironment;\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/lib/binding.js":"/*!\n * node-sass: lib/binding.js\n */\n\nvar errors = require('./errors');\n\n/**\n * Require binding\n */\nmodule.exports = function(ext) {\n  if (!ext.hasBinary(ext.getBinaryPath())) {\n    if (!ext.isSupportedEnvironment()) {\n      throw new Error(errors.unsupportedEnvironment());\n    } else {\n      throw new Error(errors.missingBinary());\n    }\n  }\n\n  return require(ext.getBinaryPath());\n};\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/lib/errors.js":"/*!\n * node-sass: lib/errors.js\n */\n\nvar sass = require('./extensions'),\n  pkg = require('../package.json');\n\nfunction humanEnvironment() {\n  return sass.getHumanEnvironment(sass.getBinaryName());\n}\n\nfunction foundBinaries() {\n  return [\n    'Found bindings for the following environments:',\n    foundBinariesList(),\n  ].join('\\n');\n}\n\nfunction foundBinariesList() {\n  return sass.getInstalledBinaries().map(function(env) {\n    return '  - ' + sass.getHumanEnvironment(env);\n  }).join('\\n');\n}\n\nfunction missingBinaryFooter() {\n  return [\n    'This usually happens because your environment has changed since running `npm install`.',\n    'Run `npm rebuild node-sass --force` to build the binding for your current environment.',\n  ].join('\\n');\n}\n\nmodule.exports.unsupportedEnvironment = function() {\n  return [\n    'Node Sass does not yet support your current environment: ' + humanEnvironment(),\n    'For more information on which environments are supported please see:',\n    'https://github.com/sass/node-sass/releases/tag/v' + pkg.version\n  ].join('\\n');\n};\n\nmodule.exports.missingBinary = function() {\n  return [\n    'Missing binding ' + sass.getBinaryPath(),\n    'Node Sass could not find a binding for your current environment: ' + humanEnvironment(),\n    '',\n    foundBinaries(),\n    '',\n    missingBinaryFooter(),\n  ].join('\\n');\n};\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/bin/node-sass":"#!/usr/bin/env node\n\nvar Emitter = require('events').EventEmitter,\n  forEach = require('async-foreach').forEach,\n  Gaze = require('gaze'),\n  grapher = require('sass-graph'),\n  meow = require('meow'),\n  util = require('util'),\n  path = require('path'),\n  glob = require('glob'),\n  sass = require('../lib'),\n  render = require('../lib/render'),\n  stdout = require('stdout-stream'),\n  stdin = require('get-stdin'),\n  fs = require('fs');\n\n/**\n * Initialize CLI\n */\n\nvar cli = meow({\n  pkg: '../package.json',\n  version: sass.info,\n  help: [\n    'Usage:',\n    '  node-sass [options] <input.scss>',\n    '  cat <input.scss> | node-sass [options] > output.css',\n    '',\n    'Example: Compile foobar.scss to foobar.css',\n    '  node-sass --output-style compressed foobar.scss > foobar.css',\n    '  cat foobar.scss | node-sass --output-style compressed > foobar.css',\n    '',\n    'Example: Watch the sass directory for changes, compile with sourcemaps to the css directory',\n    '  node-sass --watch --recursive --output css',\n    '    --source-map true --source-map-contents sass',\n    '',\n    'Options',\n    '  -w, --watch                Watch a directory or file',\n    '  -r, --recursive            Recursively watch directories or files',\n    '  -o, --output               Output directory',\n    '  -x, --omit-source-map-url  Omit source map URL comment from output',\n    '  -i, --indented-syntax      Treat data from stdin as sass code (versus scss)',\n    '  -q, --quiet                Suppress log output except on error',\n    '  -v, --version              Prints version info',\n    '  --output-style             CSS output style (nested | expanded | compact | compressed)',\n    '  --indent-type              Indent type for output CSS (space | tab)',\n    '  --indent-width             Indent width; number of spaces or tabs (maximum value: 10)',\n    '  --linefeed                 Linefeed style (cr | crlf | lf | lfcr)',\n    '  --source-comments          Include debug info in output',\n    '  --source-map               Emit source map',\n    '  --source-map-contents      Embed include contents in map',\n    '  --source-map-embed         Embed sourceMappingUrl as data URI',\n    '  --source-map-root          Base path, will be emitted in source-map as is',\n    '  --include-path             Path to look for imported files',\n    '  --follow                   Follow symlinked directories',\n    '  --precision                The amount of precision allowed in decimal numbers',\n    '  --error-bell               Output a bell character on errors',\n    '  --importer                 Path to .js file containing custom importer',\n    '  --functions                Path to .js file containing custom functions',\n    '  --help                     Print usage info'\n  ].join('\\n')\n}, {\n  boolean: [\n    'error-bell',\n    'follow',\n    'indented-syntax',\n    'omit-source-map-url',\n    'quiet',\n    'recursive',\n    'source-map-embed',\n    'source-map-contents',\n    'source-comments',\n    'watch'\n  ],\n  string: [\n    'functions',\n    'importer',\n    'include-path',\n    'indent-type',\n    'linefeed',\n    'output',\n    'output-style',\n    'precision',\n    'source-map-root'\n  ],\n  alias: {\n    c: 'source-comments',\n    i: 'indented-syntax',\n    q: 'quiet',\n    o: 'output',\n    r: 'recursive',\n    x: 'omit-source-map-url',\n    v: 'version',\n    w: 'watch'\n  },\n  default: {\n    'include-path': process.cwd(),\n    'indent-type': 'space',\n    'indent-width': 2,\n    linefeed: 'lf',\n    'output-style': 'nested',\n    precision: 5,\n    quiet: false,\n    recursive: true\n  }\n});\n\n/**\n * Is a Directory\n *\n * @param {String} filePath\n * @returns {Boolean}\n * @api private\n */\n\nfunction isDirectory(filePath) {\n  var isDir = false;\n  try {\n    var absolutePath = path.resolve(filePath);\n    isDir = fs.statSync(absolutePath).isDirectory();\n  } catch (e) {\n    isDir = e.code === 'ENOENT';\n  }\n  return isDir;\n}\n\n/**\n * Get correct glob pattern\n *\n * @param {Object} options\n * @returns {String}\n * @api private\n */\n\nfunction globPattern(options) {\n  return options.recursive ? '**/*.{sass,scss}' : '*.{sass,scss}';\n}\n\n/**\n * Create emitter\n *\n * @api private\n */\n\nfunction getEmitter() {\n  var emitter = new Emitter();\n\n  emitter.on('error', function(err) {\n    if (options.errorBell) {\n      err += '\\x07';\n    }\n    console.error(err);\n    if (!options.watch) {\n      process.exit(1);\n    }\n  });\n\n  emitter.on('warn', function(data) {\n    if (!options.quiet) {\n      console.warn(data);\n    }\n  });\n\n  emitter.on('log', stdout.write.bind(stdout));\n\n  return emitter;\n}\n\n/**\n * Construct options\n *\n * @param {Array} arguments\n * @param {Object} options\n * @api private\n */\n\nfunction getOptions(args, options) {\n  var cssDir, sassDir, file, mapDir;\n  options.src = args[0];\n\n  if (args[1]) {\n    options.dest = path.resolve(args[1]);\n  } else if (options.output) {\n    options.dest = path.join(\n      path.resolve(options.output),\n      [path.basename(options.src, path.extname(options.src)), '.css'].join(''));  // replace ext.\n  }\n\n  if (options.directory) {\n    sassDir = path.resolve(options.directory);\n    file = path.relative(sassDir, args[0]);\n    cssDir = path.resolve(options.output);\n    options.dest = path.join(cssDir, file).replace(path.extname(file), '.css');\n  }\n\n  if (options.sourceMap) {\n    if(!options.sourceMapOriginal) {\n      options.sourceMapOriginal = options.sourceMap;\n    }\n\n    // check if sourceMap path ends with .map to avoid isDirectory false-positive\n    var sourceMapIsDirectory = options.sourceMapOriginal.indexOf('.map', options.sourceMapOriginal.length - 4) === -1 && isDirectory(options.sourceMapOriginal);\n\n    if (options.sourceMapOriginal === 'true') {\n      options.sourceMap = options.dest + '.map';\n    } else if (!sourceMapIsDirectory) {\n      options.sourceMap = path.resolve(options.sourceMapOriginal);\n    } else if (sourceMapIsDirectory) {\n      if (!options.directory) {\n        options.sourceMap = path.resolve(options.sourceMapOriginal, path.basename(options.dest) + '.map');\n      } else {\n        sassDir = path.resolve(options.directory);\n        file = path.relative(sassDir, args[0]);\n        mapDir = path.resolve(options.sourceMapOriginal);\n        options.sourceMap = path.join(mapDir, file).replace(path.extname(file), '.css.map');\n      }\n    }\n  }\n\n  return options;\n}\n\n/**\n * Watch\n *\n * @param {Object} options\n * @param {Object} emitter\n * @api private\n */\n\nfunction watch(options, emitter) {\n  var buildGraph = function(options) {\n    var graph;\n    var graphOptions = {\n      loadPaths: options.includePath,\n      extensions: ['scss', 'sass', 'css']\n    };\n\n    if (options.directory) {\n      graph = grapher.parseDir(options.directory, graphOptions);\n    } else {\n      graph = grapher.parseFile(options.src, graphOptions);\n    }\n\n    return graph;\n  };\n\n  var watch = [];\n  var graph = buildGraph(options);\n\n  // Add all files to watch list\n  for (var i in graph.index) {\n    watch.push(i);\n  }\n\n  var gaze = new Gaze();\n  gaze.add(watch);\n  gaze.on('error', emitter.emit.bind(emitter, 'error'));\n\n  gaze.on('changed', function(file) {\n    var files = [file];\n\n    // descendents may be added, so we need a new graph\n    graph = buildGraph(options);\n    graph.visitAncestors(file, function(parent) {\n      files.push(parent);\n    });\n\n    // Add children to watcher\n    graph.visitDescendents(file, function(child) {\n      if (watch.indexOf(child) === -1) {\n        watch.push(child);\n        gaze.add(child);\n      }\n    });\n    files.forEach(function(file) {\n      if (path.basename(file)[0] !== '_') {\n        renderFile(file, options, emitter);\n      }\n    });\n  });\n\n  gaze.on('added', function() {\n    graph = buildGraph(options);\n  });\n\n  gaze.on('deleted', function() {\n    graph = buildGraph(options);\n  });\n}\n\n/**\n * Run\n *\n * @param {Object} options\n * @param {Object} emitter\n * @api private\n */\n\nfunction run(options, emitter) {\n  if (!Array.isArray(options.includePath)) {\n    options.includePath = [options.includePath];\n  }\n\n  if (options.directory) {\n    if (!options.output) {\n      emitter.emit('error', 'An output directory must be specified when compiling a directory');\n    }\n    if (!isDirectory(options.output)) {\n      emitter.emit('error', 'An output directory must be specified when compiling a directory');\n    }\n  }\n\n  if (options.sourceMapOriginal && options.directory && !isDirectory(options.sourceMapOriginal) && options.sourceMapOriginal !== 'true') {\n    emitter.emit('error', 'The --source-map option must be either a boolean or directory when compiling a directory');\n  }\n\n  if (options.importer) {\n    if ((path.resolve(options.importer) === path.normalize(options.importer).replace(/(.+)([\\/|\\\\])$/, '$1'))) {\n      options.importer = require(options.importer);\n    } else {\n      options.importer = require(path.resolve(options.importer));\n    }\n  }\n\n  if (options.functions) {\n    if ((path.resolve(options.functions) === path.normalize(options.functions).replace(/(.+)([\\/|\\\\])$/, '$1'))) {\n      options.functions = require(options.functions);\n    } else {\n      options.functions = require(path.resolve(options.functions));\n    }\n  }\n\n  if (options.watch) {\n    watch(options, emitter);\n  } else if (options.directory) {\n    renderDir(options, emitter);\n  } else {\n    render(options, emitter);\n  }\n}\n\n/**\n * Render a file\n *\n * @param {String} file\n * @param {Object} options\n * @param {Object} emitter\n * @api private\n */\nfunction renderFile(file, options, emitter) {\n  options = getOptions([path.resolve(file)], options);\n  if (options.watch) {\n    emitter.emit('warn', util.format('=> changed: %s', file));\n  }\n  render(options, emitter);\n}\n\n/**\n * Render all sass files in a directory\n *\n * @param {Object} options\n * @param {Object} emitter\n * @api private\n */\nfunction renderDir(options, emitter) {\n  var globPath = path.resolve(options.directory, globPattern(options));\n  glob(globPath, { ignore: '**/_*', follow: options.follow }, function(err, files) {\n    if (err) {\n      return emitter.emit('error', util.format('You do not have permission to access this path: %s.', err.path));\n    } else if (!files.length) {\n      return emitter.emit('error', 'No input file was found.');\n    }\n\n    forEach(files, function(subject) {\n      emitter.once('done', this.async());\n      renderFile(subject, options, emitter);\n    }, function(successful, arr) {\n      var outputDir = path.join(process.cwd(), options.output);\n      emitter.emit('warn', util.format('Wrote %s CSS files to %s', arr.length, outputDir));\n      process.exit();\n    });\n  });\n}\n\n/**\n * Arguments and options\n */\n\nvar options = getOptions(cli.input, cli.flags);\nvar emitter = getEmitter();\n\n/**\n * Show usage if no arguments are supplied\n */\n\nif (!options.src && process.stdin.isTTY) {\n  emitter.emit('error', [\n    'Provide a Sass file to render',\n    '',\n    'Example: Compile foobar.scss to foobar.css',\n    '  node-sass --output-style compressed foobar.scss > foobar.css',\n    '  cat foobar.scss | node-sass --output-style compressed > foobar.css',\n    '',\n    'Example: Watch the sass directory for changes, compile with sourcemaps to the css directory',\n    '  node-sass --watch --recursive --output css',\n    '    --source-map true --source-map-contents sass',\n  ].join('\\n'));\n}\n\n/**\n * Apply arguments\n */\n\nif (options.src) {\n  if (isDirectory(options.src)) {\n    options.directory = options.src;\n  }\n  run(options, emitter);\n} else if (!process.stdin.isTTY) {\n  stdin(function(data) {\n    options.data = data;\n    options.stdin = true;\n    run(options, emitter);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/lib/render.js":"/*!\n * node-sass: lib/render.js\n */\n\nvar chalk = require('chalk'),\n  fs = require('fs'),\n  mkdirp = require('mkdirp'),\n  path = require('path'),\n  sass = require('./');\n\n/**\n * Render\n *\n * @param {Object} options\n * @param {Object} emitter\n * @api public\n */\n\nmodule.exports = function(options, emitter) {\n  var renderOptions = {\n    includePaths: options.includePath,\n    omitSourceMapUrl: options.omitSourceMapUrl,\n    indentedSyntax: options.indentedSyntax,\n    outFile: options.dest,\n    outputStyle: options.outputStyle,\n    precision: options.precision,\n    sourceComments: options.sourceComments,\n    sourceMapEmbed: options.sourceMapEmbed,\n    sourceMapContents: options.sourceMapContents,\n    sourceMap: options.sourceMap,\n    sourceMapRoot: options.sourceMapRoot,\n    importer: options.importer,\n    functions: options.functions,\n    indentWidth: options.indentWidth,\n    indentType: options.indentType,\n    linefeed: options.linefeed\n  };\n\n  if (options.data) {\n    renderOptions.data = options.data;\n  } else if (options.src) {\n    renderOptions.file = options.src;\n  }\n\n  var sourceMap = options.sourceMap;\n  var destination = options.dest;\n  var stdin = options.stdin;\n\n  var success = function(result) {\n    var todo = 1;\n    var done = function() {\n      if (--todo <= 0) {\n        emitter.emit('done');\n      }\n    };\n\n    if (!destination || stdin) {\n      emitter.emit('log', result.css.toString());\n\n      if (sourceMap && !options.sourceMapEmbed) {\n        emitter.emit('log', result.map.toString());\n      }\n\n      return done();\n    }\n\n    emitter.emit('warn', chalk.green('Rendering Complete, saving .css file...'));\n\n    mkdirp(path.dirname(destination), function(err) {\n      if (err) {\n        return emitter.emit('error', chalk.red(err));\n      }\n\n      fs.writeFile(destination, result.css.toString(), function(err) {\n        if (err) {\n          return emitter.emit('error', chalk.red(err));\n        }\n\n        emitter.emit('warn', chalk.green('Wrote CSS to ' + destination));\n        emitter.emit('write', err, destination, result.css.toString());\n        done();\n      });\n    });\n\n    if (sourceMap) {\n      todo++;\n\n      mkdirp(path.dirname(sourceMap), function(err) {\n        if (err) {\n          return emitter.emit('error', chalk.red(err));\n        }\n        fs.writeFile(sourceMap, result.map, function(err) {\n          if (err) {\n            return emitter.emit('error', chalk.red('Error' + err));\n          }\n\n          emitter.emit('warn', chalk.green('Wrote Source Map to ' + sourceMap));\n          emitter.emit('write-source-map', err, sourceMap, result.map);\n          done();\n        });\n      });\n    }\n\n    emitter.emit('render', result.css.toString());\n  };\n\n  var error = function(error) {\n    emitter.emit('error', chalk.red(JSON.stringify(error, null, 2)));\n  };\n\n  var renderCallback = function(err, result) {\n    if (err) {\n      error(err);\n    }\n    else {\n      success(result);\n    }\n  };\n\n  sass.render(renderOptions, renderCallback);\n};\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/scripts/install.js":"/*!\n * node-sass: scripts/install.js\n */\n\nvar fs = require('fs'),\n  eol = require('os').EOL,\n  mkdir = require('mkdirp'),\n  path = require('path'),\n  sass = require('../lib/extensions'),\n  request = require('request'),\n  log = require('npmlog'),\n  downloadOptions = require('./util/downloadoptions');\n\n/**\n * Download file, if succeeds save, if not delete\n *\n * @param {String} url\n * @param {String} dest\n * @param {Function} cb\n * @api private\n */\n\nfunction download(url, dest, cb) {\n  var reportError = function(err) {\n    var timeoutMessge;\n\n    if (err.code === 'ETIMEDOUT') {\n      if (err.connect === true) {\n        // timeout is hit while your client is attempting to establish a connection to a remote machine\n        timeoutMessge = 'Timed out attemping to establish a remote connection';\n      } else {\n        timeoutMessge = 'Timed out whilst downloading the prebuilt binary';\n        // occurs any time the server is too slow to send back a part of the response\n      }\n\n    }\n    cb(['Cannot download \"', url, '\": ', eol, eol,\n      typeof err.message === 'string' ? err.message : err, eol, eol,\n      timeoutMessge ? timeoutMessge + eol + eol : timeoutMessge,\n      'Hint: If github.com is not accessible in your location', eol,\n      '      try setting a proxy via HTTP_PROXY, e.g. ', eol, eol,\n      '      export HTTP_PROXY=http://example.com:1234',eol, eol,\n      'or configure npm proxy via', eol, eol,\n      '      npm config set proxy http://example.com:8080'].join(''));\n  };\n\n  var successful = function(response) {\n    return response.statusCode >= 200 && response.statusCode < 300;\n  };\n\n  console.log('Downloading binary from', url);\n\n  try {\n    request(url, downloadOptions(), function(err, response) {\n      if (err) {\n        reportError(err);\n      } else if (!successful(response)) {\n        reportError(['HTTP error', response.statusCode, response.statusMessage].join(' '));\n      } else {\n        console.log('Download complete');\n        cb();\n      }\n    })\n    .on('response', function(response) {\n      var length = parseInt(response.headers['content-length'], 10);\n      var progress = log.newItem('', length);\n\n      if (successful(response)) {\n        response.pipe(fs.createWriteStream(dest));\n      }\n\n      // The `progress` is true by default. However if it has not\n      // been explicitly set it's `undefined` which is considered\n      // as far as npm is concerned.\n      if (process.env.npm_config_progress === 'true') {\n        log.enableProgress();\n\n        response.on('data', function(chunk) {\n          progress.completeWork(chunk.length);\n        })\n        .on('end', progress.finish);\n      }\n    });\n  } catch (err) {\n    cb(err);\n  }\n}\n\n/**\n * Check and download binary\n *\n * @api private\n */\n\nfunction checkAndDownloadBinary() {\n  if (process.env.SKIP_SASS_BINARY_DOWNLOAD_FOR_CI) {\n    console.log('Skipping downloading binaries on CI builds');\n    return;\n  }\n\n  var cachedBinary = sass.getCachedBinary(),\n    cachePath = sass.getBinaryCachePath(),\n    binaryPath = sass.getBinaryPath();\n\n  if (sass.hasBinary(binaryPath)) {\n    console.log('node-sass build', 'Binary found at', binaryPath);\n    return;\n  }\n\n  try {\n    mkdir.sync(path.dirname(binaryPath));\n  } catch (err) {\n    console.error('Unable to save binary', path.dirname(binaryPath), ':', err);\n    return;\n  }\n\n  if (cachedBinary) {\n    console.log('Cached binary found at', cachedBinary);\n    fs.createReadStream(cachedBinary).pipe(fs.createWriteStream(binaryPath));\n    return;\n  }\n\n  download(sass.getBinaryUrl(), binaryPath, function(err) {\n    if (err) {\n      console.error(err);\n      return;\n    }\n\n    console.log('Binary saved to', binaryPath);\n\n    cachedBinary = path.join(cachePath, sass.getBinaryName());\n\n    if (cachePath) {\n      console.log('Caching binary to', cachedBinary);\n\n      try {\n        mkdir.sync(path.dirname(cachedBinary));\n        fs.createReadStream(binaryPath)\n          .pipe(fs.createWriteStream(cachedBinary))\n          .on('error', function (err) {\n            console.log('Failed to cache binary:', err);\n          });\n      } catch (err) {\n        console.log('Failed to cache binary:', err);\n      }\n    }\n  });\n}\n\n/**\n * If binary does not exist, download it\n */\n\ncheckAndDownloadBinary();\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/scripts/util/downloadoptions.js":"var proxy = require('./proxy'),\n  userAgent = require('./useragent');\n\n/**\n * The options passed to request when downloading the bibary\n *\n * There some nuance to how request handles options. Specifically\n * we've been caught by their usage of `hasOwnProperty` rather than\n * falsey checks. By moving the options generation into a util helper\n * we can test for regressions.\n *\n * @return {Object} an options object for request\n * @api private\n */\nmodule.exports = function() {\n  var options = {\n    rejectUnauthorized: false,\n    timeout: 60000,\n    headers: {\n      'User-Agent': userAgent(),\n    }\n  };\n\n  var proxyConfig = proxy();\n  if (proxyConfig) {\n    options.proxy = proxyConfig;\n  }\n\n  return options;\n};\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/scripts/util/proxy.js":"\n/**\n * Determine the proxy settings configured by npm\n *\n * It's possible to configure npm to use a proxy different\n * from the system defined proxy. This can be done via the\n * `npm config` CLI or the `.npmrc` config file.\n *\n * If a proxy has been configured in this way we must\n * tell request explicitly to use it.\n *\n * Otherwise we can trust request to the right thing.\n *\n * @return {String} the proxy configured by npm or an empty string\n * @api private\n */\nmodule.exports = function() {\n  return process.env.npm_config_https_proxy ||\n    process.env.npm_config_proxy ||\n    process.env.npm_config_http_proxy ||\n    '';\n};\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/scripts/util/useragent.js":"var pkg = require('../../package.json');\n\n/**\n * A custom user agent use for binary downloads.\n *\n * @api private\n */\nmodule.exports = function() {\n  return [\n    'node/', process.version, ' ',\n    'node-sass-installer/', pkg.version\n  ].join('');\n};\n","/home/travis/build/npmtest/node-npmtest-node-sass/node_modules/node-sass/scripts/prepublish.js":"/*!\n * node-sass: scripts/install.js\n */\n\nvar path = require('path'),\n  rimraf = require('rimraf');\n\nfunction prepublish() {\n  var vendorPath = path.resolve(__dirname, '..', 'vendor');\n  rimraf.sync(vendorPath);\n}\n\n/**\n * Run\n */\n\nprepublish();\n"}